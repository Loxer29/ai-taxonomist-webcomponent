{"version":3,"file":"AiTaxonomist.js","sourceRoot":"","sources":["../../src/AiTaxonomist.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, css, LitElement, unsafeCSS } from 'lit'\r\nimport { property } from 'lit/decorators.js'\r\nimport './image-picker.js'\r\nimport './image-selected.js'\r\nimport './taxon-results.js'\r\nimport './components/ai-reset-button.js'\r\nimport './components/ai-footer.js'\r\nimport { ImagePickEvent } from './ImagePicker.js'\r\nimport { getGBIFDoi, identifyRequest } from './utils/identifyRequest.js'\r\nimport { BackendFormat, Results } from './utils/types.js'\r\n\r\nenum IdentifyState {\r\n    Idle,\r\n    Loading,\r\n    Loaded,\r\n    Error,\r\n}\r\n\r\nconst INIT_IDENTIFY_STATE: {\r\n    state: IdentifyState\r\n    error: string | null\r\n    results: Results\r\n} = {\r\n    state: IdentifyState.Idle,\r\n    error: null,\r\n    results: {\r\n        results: [],\r\n    },\r\n}\r\n\r\nconst lightColors = {\r\n    text: '#535559',\r\n    border: '#ccc',\r\n    outline: '#92b0b3',\r\n    background: '#eee',\r\n    backgroundHover: '#ddd',\r\n}\r\nconst darkColors = {\r\n    text: '#ccc',\r\n    border: '#666',\r\n    outline: '#888',\r\n    background: '#666',\r\n    backgroundHover: '#999',\r\n}\r\n\r\nexport class AiTaxonomist extends LitElement {\r\n    static styles = css`\r\n        :host {\r\n            display: block;\r\n            --ai-taxonomist-text-color: ${unsafeCSS(lightColors.text)};\r\n            --ai-taxonomist-separator-border-color: ${unsafeCSS(lightColors.border)};\r\n            --ai-taxonomist-accent-color: #8eb533;\r\n            --ai-taxonomist-outline: ${unsafeCSS(lightColors.outline)};\r\n            --ai-taxonomist-background: ${unsafeCSS(lightColors.background)};\r\n            --ai-taxonomist-background-hover: ${unsafeCSS(lightColors.backgroundHover)};\r\n            color: var(--ai-taxonomist-text-color);\r\n            font-size: 1.1rem;\r\n        }\r\n        :host(.prefer-dark) {\r\n            --ai-taxonomist-text-color: ${unsafeCSS(darkColors.text)};\r\n            --ai-taxonomist-separator-border-color: ${unsafeCSS(darkColors.border)};\r\n            --ai-taxonomist-outline: ${unsafeCSS(darkColors.outline)};\r\n            --ai-taxonomist-background: ${unsafeCSS(darkColors.background)};\r\n            --ai-taxonomist-background-hover: ${unsafeCSS(darkColors.backgroundHover)};\r\n        }\r\n\r\n        .innerContainer {\r\n            max-width: 850px;\r\n            margin: auto;\r\n        }\r\n\r\n        button {\r\n            display: flex;\r\n            align-items: center;\r\n            appearance: none;\r\n            border: none;\r\n            border-radius: 4px;\r\n            background-color: var(--ai-taxonomist-separator-border-color);\r\n            padding: 0.5rem 0.7rem;\r\n            font-size: 1.1rem;\r\n            cursor: pointer;\r\n            color: inherit;\r\n            transition: all 0.15s ease-in-out;\r\n            margin-top: 2rem;\r\n            margin-left: calc(16.6667% + 0.2rem);\r\n        }\r\n\r\n        @media (prefers-color-scheme: dark) {\r\n            :host(:not(.prefer-light)) {\r\n                --ai-taxonomist-text-color: ${unsafeCSS(darkColors.text)};\r\n                --ai-taxonomist-separator-border-color: ${unsafeCSS(darkColors.border)};\r\n                --ai-taxonomist-outline: ${unsafeCSS(darkColors.outline)};\r\n                --ai-taxonomist-background: ${unsafeCSS(darkColors.background)};\r\n                --ai-taxonomist-background-hover: ${unsafeCSS(darkColors.backgroundHover)};\r\n            }\r\n        }\r\n\r\n        @media only screen and (max-width: 48em) {\r\n            button {\r\n                margin-left: 0;\r\n            }\r\n        }\r\n    `\r\n\r\n    @property({ type: Array }) imageFiles: File[] = []\r\n\r\n    @property({ type: String }) apiUrl = 'https://my-api.plantnet.org/v2/identify/all'\r\n\r\n    @property({ type: String }) apiKey: string | null = null\r\n\r\n    @property({ type: Number }) maxImages: number = 5\r\n\r\n    @property({ type: Boolean }) removePlantNetBranding: boolean = false\r\n\r\n    @property({ type: Boolean }) isPlantNetBranded: boolean = false\r\n\r\n    @property({ type: String }) backendFormat: BackendFormat = BackendFormat.PLANTNET\r\n\r\n    @property({ attribute: false }) identify = { ...INIT_IDENTIFY_STATE }\r\n\r\n    @property({ attribute: false }) doiUrl: string | null = null\r\n\r\n    connectedCallback() {\r\n        super.connectedCallback()\r\n        if (\r\n            !this.removePlantNetBranding &&\r\n            (this.apiUrl.includes('https://my-api.plantnet.org') || this.apiUrl.includes('https://c4c.inria.fr'))\r\n        ) {\r\n            this.isPlantNetBranded = true\r\n        }\r\n        ;(async () => {\r\n            this.doiUrl = await getGBIFDoi(this.apiUrl, this.backendFormat)\r\n        })()\r\n    }\r\n\r\n    __addImages(e: ImagePickEvent) {\r\n        const { files } = e.detail\r\n        if (files) {\r\n            this.imageFiles = [...this.imageFiles, ...Array.from(files)].slice(0, this.maxImages)\r\n            this.runIdentify()\r\n        }\r\n    }\r\n\r\n    __removeImage(e: CustomEvent) {\r\n        const { index } = e.detail\r\n        if (index >= 0 && index < this.imageFiles.length) {\r\n            this.imageFiles.splice(index, 1)\r\n            this.imageFiles = [...this.imageFiles]\r\n            if (this.imageFiles.length === 0) {\r\n                this.reset()\r\n            } else {\r\n                this.runIdentify()\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return html` <div class=\"innerContainer\">${this.getInnerContent()}</div> `\r\n    }\r\n\r\n    async runIdentify() {\r\n        if (this.identify.state === IdentifyState.Loading) {\r\n            return\r\n        }\r\n\r\n        this.identify.error = null\r\n        this.identify.state = IdentifyState.Loading\r\n\r\n        this.dispatchEvent(\r\n            new CustomEvent('aiTaxonomistNewIdentification', {\r\n                bubbles: true,\r\n                composed: true,\r\n                cancelable: true,\r\n            })\r\n        )\r\n\r\n        const response = await identifyRequest(this.imageFiles, this.apiUrl, this.apiKey, this.backendFormat)\r\n\r\n        if (typeof response === 'string') {\r\n            this.identify.state = IdentifyState.Error\r\n            this.identify.error = response\r\n        } else {\r\n            this.identify.state = IdentifyState.Loaded\r\n            this.identify.results = response\r\n        }\r\n        this.requestUpdate()\r\n    }\r\n\r\n    getInnerContent() {\r\n        switch (this.identify.state) {\r\n            default:\r\n            case IdentifyState.Idle:\r\n                return html`\r\n                    <image-picker\r\n                        @imagepick=${this.__addImages}\r\n                        ?plantnetBrand=${this.isPlantNetBranded}\r\n                    ></image-picker>\r\n                    <ai-footer .doiUrl=${this.doiUrl} .apiUrl=${this.apiUrl}></ai-footer>\r\n                `\r\n            case IdentifyState.Loading:\r\n            case IdentifyState.Error:\r\n            case IdentifyState.Loaded:\r\n                return html`\r\n                    <image-selected\r\n                        .images=${this.imageFiles}\r\n                        .canAddImages=${this.imageFiles.length < this.maxImages}\r\n                        @addimage=${this.__addImages}\r\n                        @removeimage=${this.__removeImage}\r\n                    ></image-selected>\r\n                    <taxon-results\r\n                        .results=${this.identify.results}\r\n                        .error=${this.identify.error}\r\n                        ?loading=${this.identify.state === IdentifyState.Loading}\r\n                        ?plantnetBrand=${this.isPlantNetBranded}\r\n                    ></taxon-results>\r\n                    <ai-button-reset @press=${this.reset}>Nouvelle identification</ai-button-reset>\r\n                    <ai-footer .doiUrl=${this.doiUrl}></ai-footer>\r\n                `\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.identify = { ...INIT_IDENTIFY_STATE }\r\n        this.imageFiles = []\r\n        this.requestUpdate()\r\n    }\r\n}\r\n"]}