{"version":3,"file":"identifyRequestUtils.js","sourceRoot":"","sources":["../../../src/utils/identifyRequestUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { getBrowserLang } from './getBrowserLang.js'\r\nimport {\r\n    C4CServerResult,\r\n    CarpesoServerResult,\r\n    IdentifyC4CErrorResponse,\r\n    IdentifyC4CSuccessResponse,\r\n    IdentifyCarpesoErrorResponse,\r\n    IdentifyCarpesoSuccessResponse,\r\n    IdentifyErrorResponse,\r\n    IdentifySuccessResponse,\r\n    Results,\r\n    ServerResult,\r\n} from './types.js'\r\nimport { round } from './round.js'\r\n\r\nexport const formatPlantNetRequest = (images: File[], apiUrl: string, apiKey: string | null): [FormData, URL] => {\r\n    const form = new FormData()\r\n\r\n    for (let i = 0; i < images.length; i += 1) {\r\n        form.append('organs', 'auto')\r\n        form.append('images', images[i])\r\n    }\r\n\r\n    const url = new URL(apiUrl)\r\n    url.searchParams.append('include-related-images', 'true')\r\n    url.searchParams.append('lang', getBrowserLang())\r\n    if (apiKey && apiKey.length) {\r\n        url.searchParams.append('api-key', apiKey)\r\n    }\r\n    return [form, url]\r\n}\r\nexport const formatC4CRequest = (images: File[], apiUrl: string, apiKey: string | null): [FormData, URL] => {\r\n    const form = new FormData()\r\n    form.append('info', 'true')\r\n\r\n    for (let i = 0; i < images.length; i += 1) {\r\n        form.append('image', images[i])\r\n    }\r\n\r\n    const url = new URL(`${apiUrl}/identify`)\r\n    url.searchParams.append('lang', getBrowserLang())\r\n    if (apiKey && apiKey.length) {\r\n        url.searchParams.append('api-key', apiKey)\r\n    }\r\n    return [form, url]\r\n}\r\nexport const formatCarpesoRequest = (images: File[], apiUrl: string, apiKey: string | null): [FormData, URL] => {\r\n    const form = new FormData()\r\n\r\n    for (let i = 0; i < images.length; i += 1) {\r\n        form.append('image', images[i])\r\n    }\r\n\r\n    const url = new URL(apiUrl)\r\n    url.searchParams.append('lang', getBrowserLang())\r\n    if (apiKey && apiKey.length) {\r\n        url.searchParams.append('api-key', apiKey)\r\n    }\r\n    return [form, url]\r\n}\r\nexport const formatPlantNetResponse = async (response: Response): Promise<Results | string> => {\r\n    const responseJson: IdentifySuccessResponse | IdentifyErrorResponse = await response.json()\r\n\r\n    if ('error' in responseJson) {\r\n        return responseJson.message\r\n    }\r\n\r\n    return {\r\n        results: responseJson.results.map((result: ServerResult) => ({\r\n            score: result.score,\r\n            taxonName: result.species.scientificNameWithoutAuthor,\r\n            author: result.species.scientificNameAuthorship,\r\n            family: result.species.family.scientificName,\r\n            commonNames: result.species.commonNames,\r\n            gbifUrl: result.gbif ? `https://www.gbif.org/species/${result.gbif.id}` : null,\r\n            images: result.images\r\n                .map(image => ({\r\n                    url: image.url.m,\r\n                    alt: `${image.citation} - ${image.date.string}`,\r\n                }))\r\n                .slice(0, 3),\r\n            formatTaxonName: true,\r\n        })),\r\n    }\r\n}\r\nexport const formatC4CResponse = async (response: Response): Promise<Results | string> => {\r\n    const responseJson: IdentifyC4CSuccessResponse | IdentifyC4CErrorResponse = await response.json()\r\n\r\n    if ('status' in responseJson && responseJson.status === 'error') {\r\n        return responseJson.status\r\n    }\r\n\r\n    // Force casting as the server does not return an error type or a species field in the response in case of errors.\r\n    const responseJsonResults = (responseJson as IdentifyC4CSuccessResponse).results\r\n\r\n    return {\r\n        results: responseJsonResults.map((result: C4CServerResult) => ({\r\n            score: result.score,\r\n            taxonName: result.name,\r\n            author: result.authorship,\r\n            family: result.family,\r\n            commonNames: [result.vernacularName],\r\n            gbifUrl: `https://www.gbif.org/species/${result.gbif_id}`,\r\n            images: result.images\r\n                .map(image => ({\r\n                    url: image.url,\r\n                    alt: `${image.publisher ? `${image.publisher} - ` : ''}${image.rightsHolder} - ${image.license}`,\r\n                }))\r\n                .slice(0, 3),\r\n            formatTaxonName: true,\r\n        })),\r\n    }\r\n}\r\n\r\nexport const formatCarpersoResponse = async (response: Response, apiUrl: string): Promise<Results | string> => {\r\n    const responseJson: IdentifyCarpesoSuccessResponse | IdentifyCarpesoErrorResponse = await response.json()\r\n\r\n    if ('status' in responseJson && responseJson.status === 'error') {\r\n        return responseJson.status\r\n    }\r\n\r\n    // Force casting as the server does not return an error type or a species field in the response in case of errors.\r\n    const { results } = responseJson as IdentifyCarpesoSuccessResponse\r\n\r\n    const origin = apiUrl.replace('classify', '')\r\n\r\n    return {\r\n        overallScore: `Valeur nutritive estimée : ${round(results.nutrition, 2)} ufl/kg MS`,\r\n        results: results.details.map((result: CarpesoServerResult) => ({\r\n            score: result.score,\r\n            taxonName: result.name,\r\n            author: result.authorship,\r\n            family: null,\r\n            gbifUrl: null,\r\n            url: result.url ? result.url : undefined,\r\n            commonNames: [result.vernacularName],\r\n            additionalText: result.nutrition ? `Nutrition : ${result.nutrition} ufl/kg MS` : undefined,\r\n            images: result.images\r\n                .map(image => ({\r\n                    url: `${origin}/${image.url}`,\r\n                    alt: `${result.name} ${origin}/${image.url}`,\r\n                }))\r\n                .slice(0, 3),\r\n            formatTaxonName: true,\r\n        })),\r\n    }\r\n}\r\n"]}