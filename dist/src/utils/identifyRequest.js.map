{"version":3,"file":"identifyRequest.js","sourceRoot":"","sources":["../../../src/utils/identifyRequest.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAW,MAAM,YAAY,CAAA;AACnD,OAAO,EACH,gBAAgB,EAChB,iBAAiB,EACjB,sBAAsB,EACtB,oBAAoB,EACpB,qBAAqB,EACrB,sBAAsB,GACzB,MAAM,2BAA2B,CAAA;AAElC,MAAM,aAAa,GAAG,CAClB,MAAc,EACd,MAAc,EACd,MAAqB,EACrB,aAA4B,EACb,EAAE;IACjB,QAAQ,aAAa,EAAE;QACnB,QAAQ;QACR,KAAK,aAAa,CAAC,QAAQ;YACvB,OAAO,qBAAqB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;QACxD,KAAK,aAAa,CAAC,GAAG;YAClB,OAAO,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;QACnD,KAAK,aAAa,CAAC,OAAO;YACtB,OAAO,oBAAoB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;KAC1D;AACL,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAChC,MAAc,EACd,MAAc,EACd,MAAqB,EACrB,aAA4B,EACH,EAAE;IAC3B,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,CAAC,CAAA;IAExE,IAAI;QACA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE;YACzC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;SACb,CAAC,CAAA;QAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YACd,OAAO,UAAU,QAAQ,CAAC,UAAU,EAAE,CAAA;SACzC;QAED,QAAQ,aAAa,EAAE;YACnB,QAAQ;YACR,KAAK,aAAa,CAAC,QAAQ;gBACvB,OAAO,sBAAsB,CAAC,QAAQ,CAAC,CAAA;YAC3C,KAAK,aAAa,CAAC,GAAG;gBAClB,OAAO,iBAAiB,CAAC,QAAQ,CAAC,CAAA;YACtC,KAAK,aAAa,CAAC,OAAO;gBACtB,OAAO,sBAAsB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;SACtD;KACJ;IAAC,OAAO,KAAU,EAAE;QACjB,OAAO,UAAU,KAAK,CAAC,OAAO,EAAE,CAAA;KACnC;AACL,CAAC,CAAA;AAOD,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,MAAc,EAAE,aAA4B,EAA0B,EAAE;IACrG,IAAI,aAAa,KAAK,aAAa,CAAC,GAAG,EAAE;QACrC,OAAO,IAAI,CAAA;KACd;IAED,IAAI;QACA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,MAAM,SAAS,CAAC,CAAA;QAChD,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;YACzB,MAAM,YAAY,GAAmB,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;YAC1D,OAAO,mBAAmB,YAAY,CAAC,QAAQ,EAAE,CAAA;SACpD;QACD,OAAO,IAAI,CAAA;KACd;IAAC,OAAO,KAAU,EAAE;QACjB,OAAO,IAAI,CAAA;KACd;AACL,CAAC,CAAA","sourcesContent":["import { BackendFormat, Results } from './types.js'\r\nimport {\r\n    formatC4CRequest,\r\n    formatC4CResponse,\r\n    formatCarpersoResponse,\r\n    formatCarpesoRequest,\r\n    formatPlantNetRequest,\r\n    formatPlantNetResponse,\r\n} from './identifyRequestUtils.js'\r\n\r\nconst formatRequest = (\r\n    images: File[],\r\n    apiUrl: string,\r\n    apiKey: string | null,\r\n    backendFormat: BackendFormat\r\n): [FormData, URL] => {\r\n    switch (backendFormat) {\r\n        default:\r\n        case BackendFormat.PLANTNET:\r\n            return formatPlantNetRequest(images, apiUrl, apiKey)\r\n        case BackendFormat.C4C:\r\n            return formatC4CRequest(images, apiUrl, apiKey)\r\n        case BackendFormat.CARPESO:\r\n            return formatCarpesoRequest(images, apiUrl, apiKey)\r\n    }\r\n}\r\n\r\nexport const identifyRequest = async (\r\n    images: File[],\r\n    apiUrl: string,\r\n    apiKey: string | null,\r\n    backendFormat: BackendFormat\r\n): Promise<Results | string> => {\r\n    const [form, url] = formatRequest(images, apiUrl, apiKey, backendFormat)\r\n\r\n    try {\r\n        const response = await fetch(url.toString(), {\r\n            method: 'POST',\r\n            body: form,\r\n        })\r\n\r\n        if (!response.ok) {\r\n            return `Error: ${response.statusText}`\r\n        }\r\n\r\n        switch (backendFormat) {\r\n            default:\r\n            case BackendFormat.PLANTNET:\r\n                return formatPlantNetResponse(response)\r\n            case BackendFormat.C4C:\r\n                return formatC4CResponse(response)\r\n            case BackendFormat.CARPESO:\r\n                return formatCarpersoResponse(response, apiUrl)\r\n        }\r\n    } catch (error: any) {\r\n        return `Error: ${error.message}`\r\n    }\r\n}\r\n\r\ntype StatusResponse = {\r\n    status: string\r\n    gbif_doi: string\r\n    queries: number\r\n}\r\nexport const getGBIFDoi = async (apiUrl: string, backendFormat: BackendFormat): Promise<null | string> => {\r\n    if (backendFormat !== BackendFormat.C4C) {\r\n        return null\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${apiUrl}/status`)\r\n        if (response.status === 200) {\r\n            const responseJson: StatusResponse = await response.json()\r\n            return `https://doi.org/${responseJson.gbif_doi}`\r\n        }\r\n        return null\r\n    } catch (error: any) {\r\n        return null\r\n    }\r\n}\r\n"]}