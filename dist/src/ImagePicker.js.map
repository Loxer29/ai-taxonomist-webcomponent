{"version":3,"file":"ImagePicker.js","sourceRoot":"","sources":["../../src/ImagePicker.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,KAAK,CAAA;AAC3C,kBAAkB;AAClB,2BAA2B;AAC3B,OAAO,mBAAmB,CAAA;AAG1B,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAC5C,OAAO,gCAAgC,CAAA;AASvC,MAAM,0BAA0B,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,WAAW,CAAC,CAAA;AAE3E,MAAM,OAAO,WAAY,SAAQ,UAAU;IAA3C;;QAyCiC,eAAU,GAAY,KAAK,CAAA;QAE3B,kBAAa,GAAY,KAAK,CAAA;IA6D/D,CAAC;IA3DG,YAAY,CAAC,CAAgB;QACzB,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;SAC/B;IACL,CAAC;IAED,cAAc,CAAC,CAAQ;QACnB,IAAI,CAAC,CAAC,MAAM,YAAY,gBAAgB,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE;YACxD,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAC3D,0BAA0B,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CACjD,CAAA;YACD,IAAI,aAAa,CAAC,MAAM,EAAE;gBACtB,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAA;aACrC;SACJ;IACL,CAAC;IAED,cAAc,CAAC,KAAa;QACxB,MAAM,MAAM,GAAG;YACX,KAAK;SACR,CAAA;QACD,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;QACvG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IAC7B,CAAC;IAED,MAAM;QACF,MAAM,MAAM,GAAG,GAAG,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,kCAAkC,CAAA;QACzF,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAA;QAErD,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU;YAChC,CAAC,CAAC,IAAI,CAAA;;;;qBAIG;YACT,CAAC,CAAC,IAAI,CAAA,uEAAuE,CAAA;QAEjF,OAAO,IAAI,CAAA;;;;;6BAKU,IAAI,CAAC,YAAY;yBACrB,aAAa;;0CAEI,YAAY;;;;;;;6BAOzB,MAAM;+BACJ,IAAI,CAAC,cAAc;;;cAGpC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAA,mCAAmC,CAAC,CAAC,CAAC,EAAE;SACtE,CAAA;IACL,CAAC;;AAtGM,kBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAsClB,CAAA;AAE4B;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;+CAA4B;AAE3B;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;kDAA+B","sourcesContent":["import { html, css, LitElement } from 'lit'\r\n// prettier-ignore\r\n// eslint-disable-next-line\r\nimport \"file-drop-element\"\r\n// eslint-disable-next-line\r\nimport { FileDropEvent } from 'file-drop-element'\r\nimport { property } from 'lit/decorators.js'\r\nimport './components/plantnet-brand.js'\r\n\r\nexport type ImagePickEvent = Event & {\r\n    type: 'imagepick'\r\n    detail: {\r\n        files: File[]\r\n    }\r\n}\r\n\r\nconst SUPPORTED_IMAGE_FILE_TYPES = ['image/jpg', 'image/jpeg', 'image/png']\r\n\r\nexport class ImagePicker extends LitElement {\r\n    static styles = css`\r\n        file-drop label {\r\n            display: block;\r\n            padding: 25px;\r\n            border-radius: 4px;\r\n            outline: 2px dashed var(--ai-taxonomist-outline);\r\n            outline-offset: -2px;\r\n            transition: outline-offset 0.15s ease-in-out, background-color 0.15s linear;\r\n            cursor: pointer;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            background-color: var(--ai-taxonomist-background);\r\n        }\r\n\r\n        file-drop span {\r\n            margin-left: 4px;\r\n        }\r\n        file-drop.inline label {\r\n            width: 70px;\r\n            height: 70px;\r\n        }\r\n\r\n        file-drop.drop-valid label,\r\n        label:hover {\r\n            outline-offset: -15px;\r\n            background-color: var(--ai-taxonomist-background-hover);\r\n        }\r\n\r\n        file-drop.drop-invalid label {\r\n            background-color: red;\r\n        }\r\n\r\n        plantnet-brand {\r\n            margin-top: 6px;\r\n            display: flex;\r\n            justify-content: flex-end;\r\n        }\r\n    `\r\n\r\n    @property({ type: Boolean }) inlineMode: boolean = false\r\n\r\n    @property({ type: Boolean }) plantnetBrand: boolean = false\r\n\r\n    __onFileDrop(e: FileDropEvent) {\r\n        if (e.files.length) {\r\n            this._dispatchFiles(e.files)\r\n        }\r\n    }\r\n\r\n    __onFileUpload(e: Event) {\r\n        if (e.target instanceof HTMLInputElement && e.target.files) {\r\n            const acceptedFiles = Array.from(e.target.files).filter(file =>\r\n                SUPPORTED_IMAGE_FILE_TYPES.includes(file.type)\r\n            )\r\n            if (acceptedFiles.length) {\r\n                this._dispatchFiles(acceptedFiles)\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchFiles(files: File[]) {\r\n        const detail = {\r\n            files,\r\n        }\r\n        const event = new CustomEvent('imagepick', { detail, bubbles: true, composed: true, cancelable: true })\r\n        this.dispatchEvent(event)\r\n    }\r\n\r\n    render() {\r\n        const accept = `${SUPPORTED_IMAGE_FILE_TYPES.join(', ')}, .png, .jpg, .jpeg, .JPG, .JPEG`\r\n        const fileDropClass = this.inlineMode ? 'inline' : ''\r\n\r\n        const labelContent = this.inlineMode\r\n            ? html`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"#535559\">\r\n                  <path\r\n                      d=\"M5,3A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H14.09C14.03,20.67 14,20.34 14,20C14,19.32 14.12,18.64 14.35,18H5L8.5,13.5L11,16.5L14.5,12L16.73,14.97C17.7,14.34 18.84,14 20,14C20.34,14 20.67,14.03 21,14.09V5C21,3.89 20.1,3 19,3H5M19,16V19H16V21H19V24H21V21H24V19H21V16H19Z\"\r\n                  />\r\n              </svg>`\r\n            : html`<strong>Choisissez une image</strong><span> ou d√©posez-la ici</span>.`\r\n\r\n        return html`\r\n            <file-drop\r\n                id=\"dropPhotos\"\r\n                multiple=\"\"\r\n                accept=\"image/*\"\r\n                @filedrop=\"${this.__onFileDrop}\"\r\n                class=\"${fileDropClass}\"\r\n            >\r\n                <label for=\"fileUpload\">${labelContent}</label>\r\n                <input\r\n                    hidden\r\n                    id=\"fileUpload\"\r\n                    type=\"file\"\r\n                    placeholder=\"or click here\"\r\n                    multiple\r\n                    accept=${accept}\r\n                    @change=\"${this.__onFileUpload}\"\r\n                />\r\n            </file-drop>\r\n            ${this.plantnetBrand ? html`<plantnet-brand></plantnet-brand>` : ''}\r\n        `\r\n    }\r\n}\r\n"]}